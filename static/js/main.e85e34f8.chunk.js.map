{"version":3,"sources":["components/caption.js","components/textarea.js","components/memeGenerator.js","components/picsMenu.js","App.js","serviceWorker.js","index.js"],"names":["Caption","react_default","a","createElement","className","react_draggable_default","axis","handle","defaultPosition","x","y","position","grid","scale","onStart","this","handleStart","onDrag","handleDrag","onStop","handleStop","style","fontSize","props","data","text","Component","Textarea","name","value","id","onChange","MemeGenerator","state","memeImage","_this","image","captionCount","captionsArray","yourMeme","undefined","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","addCaption","setState","prevState","updatedArray","push","length","toString","handleChange","e","_e$target","target","map","item","resetImage","onResetImage","saveImage","event","preventDefault","domtoimage","toJpeg","document","getElementById","quality","then","dataUrl","catch","console","log","onClick","src","alt","captions","inputs","caption","key","_this2","components_textarea","evt","type","PicsMenu","allMemImages","handleImageSrc","onSelectImage","fetch","response","json","memes","images","_this3","url","App","handleImage","imgSrc","chosenImage","memeGenerator","picsMenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e85e34f8.chunk.js","sourcesContent":["/*import React, {Component} from 'react'\r\n\r\nclass Caption extends Component {\r\n    state = {\r\n        position: {\r\n            left: 0,\r\n            top: 0\r\n        },\r\n        draggable: false,\r\n        cursorOffsetX: null,\r\n        cursorOffsetY: null\r\n    }\r\n\r\n    handleMouseDown = (e) => {\r\n        if (e.target.tagName === 'SPAN') {\r\n            this.setState({draggable: true})\r\n\r\n            const widthOffset = e.clientX\r\n            const heightOffset = e.clientY\r\n\r\n            this.setState({\r\n                cursorOffsetX: widthOffset - this.state.position.left,\r\n                cursorOffsetY: heightOffset - this.state.position.top\r\n            })\r\n        }\r\n    }\r\n\r\n    handleMouseMove = (e) => {\r\n        if (this.state.draggable) {\r\n            this.setState(\r\n                {\r\n                    position: {\r\n                        left: e.clientX - this.state.cursorOffsetX,\r\n                        top: e.clientY - this.state.cursorOffsetY,\r\n                    }\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    handleMouseUp = () => {\r\n        this.setState({draggable: false})\r\n    }\r\n\r\n    // handleMouseLeave = () => {\r\n    //     if (this.state.draggable) {\r\n    //         this.setState({draggable: false})\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"captionWrapper\">\r\n                <h2\r\n                    onMouseDown={this.handleMouseDown}\r\n                    onMouseMove={this.handleMouseMove}\r\n                    onMouseUp={this.handleMouseUp}\r\n                    onMouseLeave={this.handleMouseLeave}\r\n                    style={this.state.position}\r\n                >\r\n                    <span\r\n                        className={this.state.draggable ? 'transparent' : ''}\r\n                        style={{fontSize: this.props.data.fontSize + 'vw'}}\r\n                    >{this.props.data.text}</span>\r\n                </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Caption*/\r\n\r\nimport React, { Component } from 'react';\r\nimport Draggable from 'react-draggable'\r\n\r\nclass Caption extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"caption\">\r\n                <Draggable\r\n                    axis=\"both\"\r\n                    handle=\".handle\"\r\n                    defaultPosition={{x: 0, y: 0}}\r\n                    position={null}\r\n                    grid={[10, 10]}\r\n                    scale={1}\r\n                    onStart={this.handleStart}\r\n                    onDrag={this.handleDrag}\r\n                    onStop={this.handleStop}>\r\n                    <div>\r\n                        <div className=\"handle\">\r\n                            <span\r\n                                style={{fontSize: this.props.data.fontSize + 'vw'}}>\r\n                                {this.props.data.text}\r\n                                </span>\r\n                        </div>\r\n                    </div>\r\n                </Draggable>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Caption","import React, {Component} from 'react'\r\n\r\nclass Textarea extends Component {\r\n    render() {\r\n        return (\r\n            <textarea\r\n                name=\"text\"\r\n                value={this.props.value}\r\n                id={this.props.id}\r\n                onChange={this.props.onChange}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Textarea\r\n","import React, {Component} from 'react'\r\nimport Caption from './caption'\r\nimport Textarea from './textarea'\r\nimport domtoimage from 'dom-to-image'\r\nimport {TelegramShareButton, TelegramIcon} from 'react-share'\r\n\r\nclass MemeGenerator extends Component {\r\n    state = {\r\n        memeImage: this.props.image,\r\n        captionCount: 0,\r\n        captionsArray: [],\r\n        yourMeme: undefined,\r\n        config: {\r\n            apiKey: \"AIzaSyAwq34tE0Y_onWM6h6UMDUNV2CVQ0xl8I8\",\r\n            authDomain: \"memegenerator-a3b55.firebaseapp.com\",\r\n            databaseURL: \"https://memegenerator-a3b55.firebaseio.com\",\r\n            projectId: \"memegenerator-a3b55\",\r\n            storageBucket: \"memegenerator-a3b55.appspot.com\",\r\n            messagingSenderId: \"571206420229\"\r\n        }\r\n    }\r\n\r\n    addCaption = () => {\r\n        this.setState(prevState => {\r\n            const updatedArray = prevState.captionsArray\r\n            updatedArray.push({\r\n                id: (prevState.captionsArray.length + 1).toString(),\r\n                text: 'sample text',\r\n                fontSize: '6'\r\n            })\r\n            return ({captionCount: updatedArray})\r\n        })\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {name, value, id} = e.target\r\n\r\n        const updatedArray = this.state.captionsArray.map(item => {\r\n            if (item.id === id) {\r\n                item[name] = value\r\n            }\r\n            return item\r\n        })\r\n\r\n        this.setState({\r\n            captionsArray: updatedArray\r\n        })\r\n    }\r\n\r\n    resetImage = () => {\r\n        this.props.onResetImage(null)\r\n    }\r\n\r\n    saveImage = (event) => {\r\n        event.preventDefault()\r\n        domtoimage.toJpeg(document.getElementById('my-node'), {quality: 0.95})\r\n            // .then(function (dataUrl) {\r\n            //     // var link = document.createElement('a');\r\n            //     // link.download = 'my-image-name.jpeg';\r\n            //     // link.href = dataUrl;\r\n            //     // // link.click()\r\n            //     // console.log(dataUrl)\r\n            //     // return link.href\r\n            //\r\n            //     // return dataUrl\r\n            //\r\n            //\r\n            //     const image = new Image()\r\n            //     image.src = dataUrl\r\n            //     // console.log(image.src)\r\n            //     // document.body.appendChild(image)\r\n            //     // return image\r\n            // })\r\n            .then(dataUrl => this.setState({yourMeme: dataUrl})\r\n            ).catch()\r\n        // this.setState({\r\n        //     yourMeme: image\r\n        // })\r\n        // console.log(image)\r\n    }\r\n\r\n    render() {\r\n        const yourMeme = this.state.yourMeme\r\n        console.log(yourMeme)\r\n        return (\r\n            <div className=\"memeGenerator\">\r\n                <div className=\"controls\">\r\n                    <button onClick={this.resetImage}>Another image</button>\r\n                    <button onClick={this.addCaption}>Add Caption</button>\r\n                    <button onClick={this.saveImage}>Save meme</button>\r\n                </div>\r\n                <div id=\"my-node\" className=\"memeContainer\">\r\n                    <img src={this.state.memeImage} alt=\"meme_image\"/>\r\n                    {this.captions}\r\n                </div>\r\n                {(this.state.captionsArray.length) ? (\r\n                    <div>\r\n                        <h2 className=\"mt-1 text-center\">Edit captions text and size</h2>\r\n                        {this.inputs}\r\n                    </div>\r\n                ) : ''}\r\n                {yourMeme &&\r\n                    <img src={yourMeme} alt=\"asdasd\"/>\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get captions() {\r\n        return this.state.captionsArray.map(item => {\r\n            return (\r\n                <Caption key={item.id} data={item} />\r\n            )\r\n        })\r\n    }\r\n\r\n    get inputs() {\r\n        return this.state.captionsArray.map(item => {\r\n            return (\r\n                <div className=\"captionControl\" key={item.id}>\r\n                    <Textarea\r\n                        onChange={(evt) => this.handleChange(evt)}\r\n                        name=\"text\"\r\n                        id={item.id}\r\n                        value={item.text}\r\n                    />\r\n                    <input\r\n                        name=\"fontSize\"\r\n                        id={item.id}\r\n                        onChange={this.handleChange}\r\n                        type=\"number\"\r\n                        value={item.fontSize}\r\n                    />\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n}\r\n\r\nexport default MemeGenerator\r\n","import React, {Component} from 'react'\r\n\r\nclass PicsMenu extends Component {\r\n    state = {\r\n        allMemImages: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://api.imgflip.com/get_memes')\r\n            .then(response => response.json())\r\n            .then(response => {\r\n                this.setState({\r\n                    allMemImages: response.data.memes\r\n                })\r\n            })\r\n    }\r\n\r\n    handleImageSrc = (event) => {\r\n        const {src} = event.target\r\n        this.props.onSelectImage(src)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container-fluid picsMenu\">\r\n                <h2>Choose your meme</h2>\r\n                <div className=\"row\">\r\n                    {this.images}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    get images() {\r\n        return this.state.allMemImages.map(image => {\r\n            return (\r\n                <div key={image.id} className=\"col-6 col-sm-4 col-md-3\">\r\n                    <img\r\n                        onClick={this.handleImageSrc}\r\n                        src={image.url}\r\n                        alt={image.name}/>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n}\r\n\r\nexport default PicsMenu","import React, { Component } from 'react'\nimport MemeGenerator from \"./components/memeGenerator\"\nimport './styles.sass'\nimport 'bootstrap/dist/css/bootstrap-grid.min.css'\nimport PicsMenu from \"./components/picsMenu\";\n\n\nclass App extends Component {\n    state = {\n        memeImage: null\n    }\n\n    handleImage = (imgSrc) => {\n        this.setState({memeImage: imgSrc});\n    }\n\n    render() {\n        const chosenImage = this.state.memeImage\n        return (\n            <div>\n                {(!chosenImage) ?\n                    <PicsMenu onSelectImage={this.handleImage}/> :\n                    (\n                        <div className=\"container\">\n                            <MemeGenerator\n                                onResetImage={this.handleImage}\n                                image={chosenImage} />\n                        </div>\n                    )}\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}